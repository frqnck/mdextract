#!/usr/bin/env node

var
  fs = require('fs'),
  nopt = require('nopt'),
  mdextract = require('../index'),
  opts = {
    internal: Boolean,
    json: Boolean,
    update: Boolean,
  },
  short = {
    u: '--update'
  },
  argv = nopt(opts, short, process.argv),
  mdOpts = { showInternal: argv.internal },
  fname = argv.argv.remain[0];

readInput(fname, function (err, data) {
  if (argv.json) {
    var doc = mdextract(data);
    console.log(JSON.stringify(doc, null, 2));
  } else if (argv.update) {
    data = updateFile(data);
    if (fname)
      fs.writeFileSync(fname, data, 'utf-8');
    else
      console.log(data);
  } else {
    var doc = mdextract(data);
    console.log(doc.toMarkdown(mdOpts));
  }
});

function readInput (fname, fn) {
  if (fname)
    fs.readFile(fname, 'utf-8', fn);
  else
    readStdin(fn);
}

function readStdin (fn) {
  process.stdin.resume(); /* paused by default */
  process.stdin.setEncoding('utf8');

  var data = '';
  process.stdin.on('data', function(chunk) { data += chunk.toString(); });
  process.stdin.on('end', function() { fn(null, data); });
}

function updateFile (data) {
  data = data.replace(/(<!-- include: (.*?) -->)[\s\S]*(<!-- \/include(?:: .*?)? -->)/g, function (_, open, fname, close) {
    var doc = mdextract(fs.readFileSync(fname, 'utf-8'));
    return [
      open,
      doc.toMarkdown(mdOpts),
      close
    ].join("\n");
  });

  return data;
}
